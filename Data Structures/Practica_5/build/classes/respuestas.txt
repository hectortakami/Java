1. 
    int[]list = {5, 1, 3, 2, 9, 6};

-> 1, 5, 3, 2, 9, 6
-> 1, 3, 5, 2, 9, 6
-> 1, 2, 3, 5, 9, 6
-> 1, 2, 3, 5, 6, 9

    return {1, 2, 3, 5, 6, 9}

2. 
    int[] arr = {8, 2, 5, 7, 1, 3};
    O(n2), n=6 -> 36 movimientos en el peor de los casos

(1) -> 2, 8, 5, 7, 1, 3
(2) -> 2, 5, 8, 7, 1, 3
(3) -> 2, 5, 7, 8, 1, 3
(4) -> 1, 2, 5, 7, 8, 3
(5) -> 1, 2, 3, 5, 7, 8

    return {1, 2, 3, 5, 7, 8} 
* En 5 operaciones

3.
    int[] arr = {7, 3, 2, 8, 4, 12, 10, 5, 7, 6};

(1)
first = 0   last = 10 midPoint = (0 + 10)/2 = 5
(1) [mergeSort[0, 5)] , [mergeSort[5, 10)]
-> {7, 3, 2, 8, 4} , {12, 10, 5, 7, 6}

(2)
first1 = 0   last1 = 5 midPoint1 = (0 + 5)/2 = 2
    [mergeSort[0, 2)] , [mergeSort[2, 5)]
-> {7, 3} , {2, 8, 4}

first2 = 5   last2 = 10 midPoint2 = (5 + 10)/2 = 7
    [mergeSort[5, 7)] , [mergeSort[7, 10)]
-> {12, 10} , {5, 7, 6}

(3)
     sort{7,3}
-> return {3,7}

first2 = 2   last2 = 5 midPoint2 = (2 + 5)/2 = 3
    [mergeSort[2, 3)] , [mergeSort[3, 5)]
-> {2} , {8,4}

    sort{12,10}
-> return {10,12}

first4 = 7   last4 = 10 midPoint4 = (7 + 10)/2 = 8
    [mergeSort[7, 8)] , [mergeSort[8, 10)]
-> {5} , {7,6}

(4) 
    sort{8,4}
-> return {4,8}

    sort{7,6}
-> return {6,7}


----> [{3,7}+{{2}+{4,8}}] + [{10,12}+{{5}+{6,7}}]
----> [{3,7}+{2,4,8}] + [{10,12}+{5,6,7}]
----> [{2,3,4,7,8}] + [{5,6,7,10,12}]
----> [{2,3,4,5,6,7,7,8,10,12}]

    return {2,3,4,5,6,7,7,8,10,12}
